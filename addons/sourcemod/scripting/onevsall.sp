/* Plugin Template generated by Pawn Studio */

#include <sourcemod>

#define MAX_CLASS 10

new String:cfgDir[] = "cfg/sourcemod/onevsall/onevsall_classes.cfg";
new g_ArrClassName, g_ArrClassHP, g_ArrClassSpeed
bool temp = false;

ConVar cvar_Enabled
public Plugin:myinfo = 
{
	name = "One_VS_All: Classes",
	author = "Dinh Tien Loc",
	description = "No description",
	version = "1.0",
	url = "biendaobietnam.com.vn:27016"
}

public OnPluginStart()
{
	cvar_Enabled = CreateConVar("sm_class_enable", "1", "enable or disable class for 1 vs all mode [Enable: 1, Disable: 0, Default: 1]");
	
	RegConsoleCmd("test_command", Command_Test);
}

public Action Command_Test(int client, int args) {
	if(client) {
		ReadCfgFile(client, cfgDir);
		PrintToChat(client, "Is import: %b", temp);
	}
	return Plugin_Handled
}

public PrepareVariable() {
	
}

public ReadCfgFile(int client, char[] configDir) {
	if(!GetConVarBool(cvar_Enabled)) {
		PrintToConsole(client, "Class plugin disabled!");
		return;
	}
	
	PrintToConsole(client, "Allow to excute configs");
	KeyValues kv = new KeyValues("Classes");
	temp = FileToKeyValues(kv, cfgDir);
	
	KvRewind(kv);
	
	// If there is no sub key in root "Classes"
	if(!KvGotoFirstSubKey(kv, true)) {
		// Print error and stop
		PrintToConsole(client, "Format error in config file: No class found");
		CloseHandle(kv);
		return;
	}
	
	new String:tempClassName[16], String:tempValue[16], String:tempSetName[16], String:tempKey[16]
	// Loop through keys in "Classes".
	do {
		KvSavePosition(kv);
		// Get name of each class
		KvGetSectionName(kv, tempClassName, sizeof(tempClassName)); 
		PrintToConsole(client, "Class: %s", tempClassName);
		
		if(KvGotoFirstSubKey(kv, true)) {
			KvGetSectionName(kv, tempSetName, sizeof(tempSetName));
			PrintToConsole(client, "Start at %s section in: %s", tempSetName, tempClassName);
			
			do {
				KvGetSectionName(kv, tempSetName, sizeof(tempSetName));
				PrintToConsole(client, "--> Set: %s", tempSetName);
				
				KvGetString(kv, "primary", tempValue, sizeof(tempValue));
				PrintToConsole(client, "====> Primary Value: %s", tempValue);
				
				KvGetString(kv, "secondary", tempValue, sizeof(tempValue));
				PrintToConsole(client, "====> Secondary Value: %s", tempValue);
				
				KvGetString(kv, "freeze", tempValue, sizeof(tempValue));
				PrintToConsole(client, "====> Freeze Value: %s", tempValue);
				
				KvGetString(kv, "napalm", tempValue, sizeof(tempValue));
				PrintToConsole(client, "====> Napalm Value: %s", tempValue);
				
				KvGetString(kv, "speed", tempValue, sizeof(tempValue));
				PrintToConsole(client, "====> Speed Value: %s", tempValue);
				
				KvGetString(kv, "hp", tempValue, sizeof(tempValue));
				PrintToConsole(client, "====> Hp Value: %s", tempValue);
				
				KvGetString(kv, "armor", tempValue, sizeof(tempValue));
				PrintToConsole(client, "====> Armor Value: %s", tempValue);
					
			}
			while (KvGotoNextKey(kv, true));
		}
		
		KvGoBack(kv);
		PrintToConsole(client, "Return to Class: %s", tempClassName);
		
	}
	while (KvGotoNextKey(kv));
		
	CloseHandle(kv);
	PrintToConsole(client, "Reading config file is done!");
	return;
}
